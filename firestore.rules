rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to determine if a user is an admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isEventOrganizer(eventId) {
      return isSignedIn() && 
        get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
    }

    function isCommentOwner(commentData) {
      return request.auth != null && commentData.userId == request.auth.uid;
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Default rule - deny access unless specific rules allow it
    match /{document=**} {
      allow read, write: if false;
    }

    // User profiles - users can read/write their own data
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Service Requests - users can create and read their own requests
    match /serviceRequests/{requestId} {
      allow create: if request.auth != null && 
                      request.resource.data.userId == request.auth.uid;
      
      allow read: if request.auth != null && 
                    (resource.data.userId == request.auth.uid || isAdmin());
      
      allow update, delete: if isAdmin();
    }

    // Events collection
    match /events/{eventId} {
      allow read: if true;  // Anyone can read event details
      
      // Allow authenticated users to create events
      allow create: if isSignedIn();
      
      // Allow organizer or admin to update/delete events
      allow update, delete: if isSignedIn() && (isEventOrganizer(eventId) || isAdmin());

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn() && 
          request.resource.data.userId == request.auth.uid;
        allow delete: if isSignedIn() && 
          get(/databases/$(database)/documents/events/$(eventId)/comments/$(commentId)).data.userId == request.auth.uid;
      }

      // Likes subcollection
      match /likes/{userId} {
        allow read: if true;
        allow create, delete: if isSignedIn() && userId == request.auth.uid;
      }

      // Zones subcollection
      match /zones/{zoneId} {
        allow read: if true;
        allow write: if isSignedIn() && (isEventOrganizer(eventId) || isAdmin());
      }

      // Seats subcollection
      match /seats/{seatId} {
        allow read: if true;
        allow create, update: if isAuthenticated();
        allow delete: if false;
      }

      // Ticket types subcollection
      match /ticketTypes/{ticketId} {
        allow read: if true;
        allow write: if isSignedIn() && (isEventOrganizer(eventId) || isAdmin());
      }

      // Seating layout subcollection
      match /seating/{layoutId} {
        allow read: if true;
        allow write: if isSignedIn() && (isEventOrganizer(eventId) || isAdmin());
      }
    }

    // Admin collection - only admins can access
    match /admins/{userId} {
      allow read: if request.auth != null;
    }

    // Categories collection
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }

    // Activities collection
    match /activities/{activityId} {
      allow read, write: if isAuthenticated();
    }

    // Bookings collection
    match /bookings/{bookingId} {
      allow read: if true;
      allow create: if true;
      allow update, delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.organizerId);
    }

    // Concierge requests
    match /concierge_requests/{requestId} {
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.createdAt == request.time;
      allow read: if request.auth != null 
        && (resource.data.userId == request.auth.uid || isAdmin());
      allow update: if false;
      allow delete: if false;
    }

    // Rewards collection
    match /rewards/{rewardId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // User Points collection
    match /userPoints/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // User Tiers collection
    match /userTiers/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}